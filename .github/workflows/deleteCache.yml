name: "Delete stale cache"

on:
    workflow_dispatch:
    schedule:
        - cron: '0 0/6 * * *'

jobs:
  delete:
    name: "Cache cleanup"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    steps:
      - name: checkout
        uses: actions/checkout@v4.1.7

      - name: Node
        uses: actions/setup-node@v4.0.4

      - name: install requirements
        run: npm install @actions/core @actions/github @octokit/rest moment

      - name: Delete Cache
        uses: actions/github-script@v7.0.1
        env:
          TIME: 5d
        with:
          script: |
            const moment = require('moment');
            
            const owner = context.repo.owner;
            const repo = context.repo.repo; 
            const timeValue =  process.env.TIME ? process.env.TIME : "15d";
            
            const timeUnitMapping = {
              d: 'days',
              mo: 'months',
              m: 'minutes',
              h: 'hours',
              w: 'weeks',
              y: 'years',
            };
            
            const staleThreshold = convertDurationToDate(timeValue);
            console.info("StaleThreshold: " + staleThreshold.format());
            
            function convertDurationToDate(duration) {
              const [_, value, unit] = duration.match(/(\d+)([a-z]+)/);
              const momentDuration = moment.duration(parseInt(value), timeUnitMapping[unit]);
              const date = moment().subtract(momentDuration).toDate();
              return moment(date);
            }
            
            async function deleteStaleCaches() {
              try {
                const { data: caches } = await github.rest.actions.getActionsCacheList({
                  owner,
                  repo,
                  per_page: 100
                });
            
                for (const cache of caches.actions_caches) {
                  const cacheLastAccessedAt = cache.last_accessed_at ? moment(cache.last_accessed_at): null;
                  if (cacheLastAccessedAt) {
                    cacheLastAccessedAt.utcOffset(moment().utcOffset());
                  }
            
                  if (cache.last_accessed_at && cacheLastAccessedAt && cacheLastAccessedAt.isBefore(staleThreshold)) {
                    console.debug(`Cache to be deleted: ${JSON.stringify(cache, null, 2)}`);
                    
                    deleteCache = await github.rest.actions.deleteActionsCacheById({
                      owner,
                      repo,
                      cache_id: cache.id
                    })
                  }
                }
              } catch (error) {
                console.error(`Error deleting stale caches: ${error.message}`);
                core.setFailed('Cache deletion failed');
              }
            }
            
            deleteStaleCaches();